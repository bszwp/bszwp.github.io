{"compress":true,"commitItems":[["e8979053-e497-4939-9102-c2e2cce4136d",1510745089557,"",[[1510745061569,["zhang@DESKTOP-9D7LAL4",[[1,0,"2017-10-20-redis数据类型"]],[0,0],[20,20]]],[1510745066270,["zhang@DESKTOP-9D7LAL4",[[-1,0,"2017-10-20-redis数据类型"]],[20,20],[0,0]]],[1510745079606,["zhang@DESKTOP-9D7LAL4",[[1,0,"---\nlayout: post\ntitle: \"redis集群搭建 \"\ndate: 2017-10-22\ntags: 博客\n---"]],[0,0],[66,66]]],[1510745112022,["zhang@DESKTOP-9D7LAL4",[[1,66,"\n\n<p>\r\n    <span style=\"font-size: 24px;\">1.简单工厂模式概念：</span>\r\n</p>\r\n<p>\r\n    <span style=\"color: rgb(0, 0, 0); font-size: 20px;\"><span style=\"font-family: 宋体; font-size: 20px;\">简单工厂模式属于类的创建型模式</span><span style=\"font-family: Arial; font-size: 20px;\">,</span><span style=\"font-family: 宋体; font-size: 20px;\">又叫做静态工厂方法模式。通过专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</span></span>\r\n</p>\r\n<p>\r\n    <strong><span style=\"color: rgb(0, 0, 0); font-family: 宋体; font-size: 24px;\">2.简单工厂模式的三大角色：</span></strong>\r\n</p>\r\n<p>\r\n    <span style=\"color: rgb(0, 0, 0); font-size: 20px;\"><span style=\"font-family: 宋体; font-size: 20px;\">&nbsp;(1)工厂（</span><span style=\"font-family: Arial; font-size: 20px;\">Creator</span><span style=\"font-family: 宋体; font-size: 20px;\">）角色<br/> 简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。工厂类可以被外界直接调用，创建所需的产品对象。</span></span>\r\n</p>\r\n<p>\r\n    <span style=\"color: rgb(0, 0, 0); font-size: 20px;\"><span style=\"font-family: 宋体; font-size: 20px;\"></span></span><span style=\"color: rgb(0, 0, 0); font-size: 20px;\"><span style=\"font-family: 宋体; font-size: 20px;\"> （2）抽象（</span><span style=\"font-family: Arial; font-size: 20px;\">Product</span><span style=\"font-family: 宋体; font-size: 20px;\">）角色<br/> 简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。<br/></span></span>\r\n</p>\r\n<p>\r\n    <span style=\"color: rgb(0, 0, 0); font-size: 20px;\"><span style=\"font-family: 宋体; font-size: 20px;\">&nbsp;(3)具体产品（</span><span style=\"font-family: Arial; font-size: 20px;\">Concrete Product</span><span style=\"font-family: 宋体; font-size: 20px;\">）角色<br/>简单工厂模式所创建的具体实例对象</span></span>\r\n</p>\r\n<p>\r\n    <strong><span style=\"color: rgb(0, 0, 0); font-family: 宋体; font-size: 24px;\">3.代码解释：</span></strong><span style=\"color: rgb(0, 0, 0); font-family: 宋体; font-size: 20px;\"><br/>先创建Apple,Banana,Main测试类，创建对应的实例。</span>\r\n</p>\r\n<p>\r\n    <span style=\"color: rgb(0, 51, 102); font-family: 宋体; font-size: 27px;\"><img alt=\"1510743010384068512.jpg\" src=\"http://www.520zwp.com/static/userImages/20171115/1510743010384068512.jpg\"/></span>\r\n</p>\r\n<p>\r\n    <span style=\"color: rgb(0, 51, 102); font-family: 宋体; font-size: 27px;\"><img alt=\"1510743027119008872.jpg\" src=\"http://www.520zwp.com/static/userImages/20171115/1510743027119008872.jpg\"/></span>\r\n</p>\r\n<p>\r\n    <span style=\"color: rgb(0, 51, 102); font-family: 宋体; font-size: 27px;\"><img alt=\"1510744095092020855.jpg\" src=\"http://www.520zwp.com/static/userImages/20171115/1510744095092020855.jpg\"/></span>\r\n</p>\r\n<p>\r\n    &nbsp;\r\n</p>\r\n<p>\r\n    <span style=\"color: rgb(0, 0, 0); font-family: 宋体; font-size: 20px;\">（1）第一种方案一般是通过直接new实例,然后调用其方法如上图。</span>\r\n</p>\r\n<p>\r\n    <span style=\"color: rgb(0, 0, 0); font-family: 宋体; font-size: 20px;\">（2）第二种方案，由于Apple和Banana中有共同的get方法，所以写个Fruit接口,Apple,Banana分别实现这个接口，在Main中通过多态来创建对应的实例</span>\r\n</p>\r\n<p>\r\n    <span style=\"color: rgb(0, 51, 102); font-family: 宋体; font-size: 20px;\"><img alt=\"1510743216460031675.jpg\" src=\"http://www.520zwp.com/static/userImages/20171115/1510743216460031675.jpg\"/></span>\r\n</p>\r\n<p>\r\n    <span style=\"color: rgb(0, 51, 102); font-family: 宋体; font-size: 20px;\"><img alt=\"1510743230062051512.jpg\" src=\"http://www.520zwp.com/static/userImages/20171115/1510743230062051512.jpg\"/></span>\r\n</p>\r\n<p>\r\n    <span style=\"border: currentColor; border-image: none; color: rgb(0, 0, 0); font-family: 宋体; font-size: 20px;\">（3）第三种简单工厂模式：</span>\r\n</p>\r\n<p>\r\n    <span style=\"font-family: 宋体; font-size: 20px;\">创建一个FruitFactory的工厂类，在里面进行逻辑判断。在通过传的参数来生成对应的实例。</span>\r\n</p>\r\n<p>\r\n    <span style=\"font-family: 宋体; font-size: 20px;\"><img alt=\"1510744069733094705.jpg\" src=\"http://www.520zwp.com/static/userImages/20171115/1510744069733094705.jpg\"/></span>\r\n</p>\r\n<p>\r\n    &nbsp;\r\n</p>\r\n<p>\r\n    结果均显示为：\r\n</p>\r\n<p>\r\n    <img alt=\"1510743405847031413.jpg\" src=\"http://www.520zwp.com/static/userImages/20171115/1510743405847031413.jpg\"/>\r\n</p>\r\n<p>\r\n    <span style=\"font-size: 24px;\">4.总结：</span>\r\n</p>\r\n<p>\r\n    <span style=\"color: rgb(0, 0, 0); font-family: 宋体; font-size: 20px;\">在这个模式中，工厂类是整个模式的关键所在。它包含必要的判断逻辑，能够根据外界给定的信息，决定究竟应该创建哪个具体类的对象。用户在使用时可以直接根据工厂类去创建所需的实例，而无需了解这些对象是如何创建以及如何组织的。有利于整个软件体系结构的优化。<br/>不难发现，简单工厂模式的缺点也正体现在其工厂类上，由于工厂类集中了所有实例的创建逻辑，所以“高内聚”方面做的并不好。另外，当系统中的具体产品类不断增多时，可能会出现要求工厂类也要做相应的修改，扩展性并不很好。</span><span style=\"color: rgb(0, 51, 102); font-family: 宋体; font-size: 24px;\"> </span>\r\n</p>\r\n<p>\r\n    <br/>\r\n</p>\r\n<p>\r\n    <br/>\r\n</p>"]],[66,66],[4359,4359]]]]]]}